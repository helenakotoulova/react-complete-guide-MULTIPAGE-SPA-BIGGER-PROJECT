{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","QuotesDetail","quoteId","useParams","useHttp","getSingleQuote","sendRequest","status","loadedQuote","data","error","useEffect","LoadingSpinner"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,MAAQ,kC,iFCUXC,EATU,SAACC,GACxB,OACE,yBAAQC,UAAWC,IAAQC,MAA3B,UACE,4BAAIH,EAAMI,OACV,qCAAaJ,EAAMK,a,uBCyEVC,UAxEM,WACnB,IACQC,EADOC,cACPD,QAmCR,EAKIE,YAAQC,KAAgB,GAJ1BC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAOF,OAJAC,qBAAU,WACRL,EAAYJ,KACX,CAACI,EAAaJ,IAEF,YAAXK,EAEA,qBAAKX,UAAU,WAAf,SACE,cAACgB,EAAA,EAAD,MAKS,UAAXL,EACK,mBAAGX,UAAU,mBAAb,SAAiCc,IAGrCF,EAAYT,KAKf,eAAC,WAAD,WACE,cAAC,EAAD,CAAkBA,KAAMS,EAAYT,KAAMC,OAAQQ,EAAYR,SAC9D,cAAC,IAAD,OANK","file":"static/js/5.98ed6077.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__36Ktp\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Outlet } from \"react-router-dom\";\r\nimport { Fragment, useEffect } from \"react\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuotesDetail = () => {\r\n  const params = useParams();\r\n  const { quoteId } = params; // object destructuring\r\n  //const match = useRouteMatch(); // to ted uz ve v6 nebudeme potrebovat\r\n  //console.log(match) // isExact: false, params: {quoteId: 'q2'}, path: \"/quotes/:quoteId\", url: \"/quotes/q2\"\r\n\r\n  // takhle jsme to meli, kdyz jsme tu meli vypsane ty DUMMY_QUOTES\r\n  //const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\r\n  // pokud uzivatel zada do url napr. quotes/q3, ktery nemame, tak se displayn tahle fallback hlaska.\r\n  //if (!quote) {\r\n  //return <p>No Quote Found.</p>;\r\n  //}\r\n\r\n  /*\r\n  GETTING CREATED WITH NESTED ROUTES\r\n  Pridali jsme Link na loadovani commentu. Ale ten odkaz Load Comments tam zusrava i po kliknuti na nej.\r\n  Tzn. bud muzeme vytorit nejakou const, ktera bude zjistovat jestli uz jsem na strance /quotes/quoteId/comments a podle toho\r\n  to Load Comments bude bud skryvat nebo odkryvat. Nebo to load comments pridame do samostatne Route,\r\n  ktera bude mit path jen quotes/quoteId EXACT. Tazke kdyz budeme na quotes/quoteId, tak tam bude Link LoadComments,\r\n  ale jakmile se dostaneme na quotes/quoteId/comments, uz to tam nebude, protoze budeme v jine Route.\r\n */\r\n\r\n  /*\r\nWRITING MORE FLEXIBLE ROUTING CODE\r\nTed kdyz bychom chteli zmenit route path z napr. '/quotes' na '/quote', tak bychom to pak museli spravit ve vsech\r\nnested routes a taky v Links. Tzn na hodne mistech.\r\nProto pouzijeme dalsi react router dom hook => useRouteMatch. Je to podobne jako useLocation, ale dava nam to vic info o te konkretni Route.\r\nconst match = useRouteMatch();\r\n//console.log(match) // isExact: false, params: {quoteId: 'q2'}, path: \"/quotes/:quoteId\", url: \"/quotes/q2\"\r\nTzn misto: <Route path={`/quotes/${params.quoteId}/comments`}>\r\nPak muzeme psat: <Route path={`${match.path}/comments`}>\r\nA misto: <Route path={`/quotes/${params.quoteId}`} exact>\r\nMuzeme psat: <Route path={match.path} exact>\r\nA misto: <Link className=\"btn--flat\" to={`/quotes/${params.quoteId}/comments`}>\r\nNapisu: <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n*/\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === \"error\") {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Outlet />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuotesDetail;\r\n\r\n/*\r\nVE VERZI 5 REACT-ROUTER-DOMU:\r\nreturn (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n*/\r\n\r\n// ta className='centered' je nadefinovana primo v index.css a ne v zadnem modulu.css\r\n// i ta className v Linku je nadef. primo v index.css\r\n\r\n/*\r\nPRIPADNE: \r\nProtoze tady definujeme route a ne link, mohli bychom taky nastavit path jako:\r\npath='/quotes/:quoteId/comments'\r\n*/\r\n\r\n/*\r\nDYNAMIC ROUTES AND PARAMS:\r\n-dynamic routes jsou pro zobrazovani detailu nejakeho produktu, na ktery jsme klikli.\r\ntu route pak zapiseme jako: \r\n<Route path=\"/quotes/:quoteId\">\r\n            <QuotesDetail />\r\n</Route>\r\n\r\nAle abychom vedeli, ktery ten QuoteDetail mame zobrazit (tzn. pro ktere id quote to mame zobrazit), potrebujeme zjisit to quoteId.\r\nTo udelame pomoci useParams v QuoteDetail:\r\nconst params=useParams();\r\n <Route path={`/quotes/${params.quoteId}/comments`}>\r\n            <Comments />\r\n</Route>\r\n*/\r\n\r\n/*\r\nABYCHOM SE ALE DOSTALI NA TY JEDNOTLIVE ODKAZY, POTREBUJEME LINKS\r\nNapr. v MainHeaderu - zde je to hardcoded.\r\n<NavLink to=\"/quotes\" activeClassName={classes.active}>\r\n              All Quotes\r\n </NavLink>\r\n\r\n Nebo v QuoteItem - zde je to dynamic. protoze pro kazdy ten quote se nacte jina \"stranka\" fullscreen. - podle id.\r\n <Link to={`/quotes/${props.id}`} className='btn'>\r\n        View Fullscreen\r\n</Link>\r\n\r\n\r\n*/\r\n"],"sourceRoot":""}